plugins {
  id 'org.springframework.boot' version '2.4.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'war'
  id 'jacoco'
}

group = 'co.com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'junit:junit:4.12'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
  compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation('org.mockito:mockito-core:2.27.0')
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacoco {
  toolVersion = "0.8.5"
  reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
  jacoco {
    //append = false
    destinationFile = file("$buildDir/jacoco/jacoco.exec")
  }
}

println project.name
println "$buildDir/jacoco/"
println getBuildDir().toString() + File.separator.toString() + "jacoco" + File.separator.toString() + "coverage.xml"

jacocoTestReport {
  description = "Generate Jacoco coverage reports"
  reports {
    //xml.enabled true
    xml.enabled false
    //xml.destination file("${project.buildDir}/reports/jacoco/report.xml")
    //xml.destination = file(getBuildDir().toString() + File.separator.toString() + "jacoco" + File.separator.toString()+"coverage.xml")
    csv.enabled false
    //html.destination file("${project.buildDir}/reports/jacoco/html")
    //html.destination = file(getBuildDir().toString() + File.separator.toString() + "jacoco" + File.separator.toString() + "html")
    html.destination file("${buildDir}/jacocoHtml")
  }
}
